// Copyright 2019 The Samply Development Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// MedicinalProductContraindication is documented here http://hl7.org/fhir/StructureDefinition/MedicinalProductContraindication
type MedicinalProductContraindication struct {
	Id                    *string                                        `bson:"id,omitempty" json:"id,omitempty"`
	Meta                  *Meta                                          `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules         *string                                        `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language              *string                                        `bson:"language,omitempty" json:"language,omitempty"`
	Text                  *Narrative                                     `bson:"text,omitempty" json:"text,omitempty"`
	Extension             []Extension                                    `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension     []Extension                                    `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Subject               []Reference                                    `bson:"subject,omitempty" json:"subject,omitempty"`
	Disease               *CodeableConcept                               `bson:"disease,omitempty" json:"disease,omitempty"`
	DiseaseStatus         *CodeableConcept                               `bson:"diseaseStatus,omitempty" json:"diseaseStatus,omitempty"`
	Comorbidity           []CodeableConcept                              `bson:"comorbidity,omitempty" json:"comorbidity,omitempty"`
	TherapeuticIndication []Reference                                    `bson:"therapeuticIndication,omitempty" json:"therapeuticIndication,omitempty"`
	OtherTherapy          []MedicinalProductContraindicationOtherTherapy `bson:"otherTherapy,omitempty" json:"otherTherapy,omitempty"`
	Population            []Population                                   `bson:"population,omitempty" json:"population,omitempty"`
}
type MedicinalProductContraindicationOtherTherapy struct {
	Id                      *string         `bson:"id,omitempty" json:"id,omitempty"`
	Extension               []Extension     `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension       []Extension     `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	TherapyRelationshipType CodeableConcept `bson:"therapyRelationshipType" json:"therapyRelationshipType"`
}
type OtherMedicinalProductContraindication MedicinalProductContraindication

// MarshalJSON marshals the given MedicinalProductContraindication as JSON into a byte slice
func (r MedicinalProductContraindication) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherMedicinalProductContraindication
		ResourceType string `json:"resourceType"`
	}{
		OtherMedicinalProductContraindication: OtherMedicinalProductContraindication(r),
		ResourceType:                          "MedicinalProductContraindication",
	})
}

// UnmarshalMedicinalProductContraindication unmarshals a MedicinalProductContraindication.
func UnmarshalMedicinalProductContraindication(b []byte) (MedicinalProductContraindication, error) {
	var medicinalProductContraindication MedicinalProductContraindication
	if err := json.Unmarshal(b, &medicinalProductContraindication); err != nil {
		return medicinalProductContraindication, err
	}
	return medicinalProductContraindication, nil
}
