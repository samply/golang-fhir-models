// Copyright 2019 The Samply Development Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import "encoding/json"

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// Device is documented here http://hl7.org/fhir/StructureDefinition/Device
type Device struct {
	Id                 *string                `bson:"id,omitempty" json:"id,omitempty"`
	Meta               *Meta                  `bson:"meta,omitempty" json:"meta,omitempty"`
	ImplicitRules      *string                `bson:"implicitRules,omitempty" json:"implicitRules,omitempty"`
	Language           *string                `bson:"language,omitempty" json:"language,omitempty"`
	Text               *Narrative             `bson:"text,omitempty" json:"text,omitempty"`
	Extension          []Extension            `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension  []Extension            `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Identifier         []Identifier           `bson:"identifier,omitempty" json:"identifier,omitempty"`
	Definition         *Reference             `bson:"definition,omitempty" json:"definition,omitempty"`
	UdiCarrier         []DeviceUdiCarrier     `bson:"udiCarrier,omitempty" json:"udiCarrier,omitempty"`
	Status             *FHIRDeviceStatus      `bson:"status,omitempty" json:"status,omitempty"`
	StatusReason       []CodeableConcept      `bson:"statusReason,omitempty" json:"statusReason,omitempty"`
	DistinctIdentifier *string                `bson:"distinctIdentifier,omitempty" json:"distinctIdentifier,omitempty"`
	Manufacturer       *string                `bson:"manufacturer,omitempty" json:"manufacturer,omitempty"`
	ManufactureDate    *string                `bson:"manufactureDate,omitempty" json:"manufactureDate,omitempty"`
	ExpirationDate     *string                `bson:"expirationDate,omitempty" json:"expirationDate,omitempty"`
	LotNumber          *string                `bson:"lotNumber,omitempty" json:"lotNumber,omitempty"`
	SerialNumber       *string                `bson:"serialNumber,omitempty" json:"serialNumber,omitempty"`
	DeviceName         []DeviceDeviceName     `bson:"deviceName,omitempty" json:"deviceName,omitempty"`
	ModelNumber        *string                `bson:"modelNumber,omitempty" json:"modelNumber,omitempty"`
	PartNumber         *string                `bson:"partNumber,omitempty" json:"partNumber,omitempty"`
	Type               *CodeableConcept       `bson:"type,omitempty" json:"type,omitempty"`
	Specialization     []DeviceSpecialization `bson:"specialization,omitempty" json:"specialization,omitempty"`
	Version            []DeviceVersion        `bson:"version,omitempty" json:"version,omitempty"`
	Property           []DeviceProperty       `bson:"property,omitempty" json:"property,omitempty"`
	Patient            *Reference             `bson:"patient,omitempty" json:"patient,omitempty"`
	Owner              *Reference             `bson:"owner,omitempty" json:"owner,omitempty"`
	Contact            []ContactPoint         `bson:"contact,omitempty" json:"contact,omitempty"`
	Location           *Reference             `bson:"location,omitempty" json:"location,omitempty"`
	Url                *string                `bson:"url,omitempty" json:"url,omitempty"`
	Note               []Annotation           `bson:"note,omitempty" json:"note,omitempty"`
	Safety             []CodeableConcept      `bson:"safety,omitempty" json:"safety,omitempty"`
	Parent             *Reference             `bson:"parent,omitempty" json:"parent,omitempty"`
}
type DeviceUdiCarrier struct {
	Id                *string       `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension   `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension   `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	DeviceIdentifier  *string       `bson:"deviceIdentifier,omitempty" json:"deviceIdentifier,omitempty"`
	Issuer            *string       `bson:"issuer,omitempty" json:"issuer,omitempty"`
	Jurisdiction      *string       `bson:"jurisdiction,omitempty" json:"jurisdiction,omitempty"`
	CarrierAIDC       *string       `bson:"carrierAIDC,omitempty" json:"carrierAIDC,omitempty"`
	CarrierHRF        *string       `bson:"carrierHRF,omitempty" json:"carrierHRF,omitempty"`
	EntryType         *UDIEntryType `bson:"entryType,omitempty" json:"entryType,omitempty"`
}
type DeviceDeviceName struct {
	Id                *string        `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension    `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension    `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Name              string         `bson:"name" json:"name"`
	Type              DeviceNameType `bson:"type" json:"type"`
}
type DeviceSpecialization struct {
	Id                *string         `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension     `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension     `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	SystemType        CodeableConcept `bson:"systemType" json:"systemType"`
	Version           *string         `bson:"version,omitempty" json:"version,omitempty"`
}
type DeviceVersion struct {
	Id                *string          `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension      `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension      `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Type              *CodeableConcept `bson:"type,omitempty" json:"type,omitempty"`
	Component         *Identifier      `bson:"component,omitempty" json:"component,omitempty"`
	Value             string           `bson:"value" json:"value"`
}
type DeviceProperty struct {
	Id                *string           `bson:"id,omitempty" json:"id,omitempty"`
	Extension         []Extension       `bson:"extension,omitempty" json:"extension,omitempty"`
	ModifierExtension []Extension       `bson:"modifierExtension,omitempty" json:"modifierExtension,omitempty"`
	Type              CodeableConcept   `bson:"type" json:"type"`
	ValueQuantity     []Quantity        `bson:"valueQuantity,omitempty" json:"valueQuantity,omitempty"`
	ValueCode         []CodeableConcept `bson:"valueCode,omitempty" json:"valueCode,omitempty"`
}
type OtherDevice Device

// MarshalJSON marshals the given Device as JSON into a byte slice
func (r Device) MarshalJSON() ([]byte, error) {
	return json.Marshal(struct {
		OtherDevice
		ResourceType string `json:"resourceType"`
	}{
		OtherDevice:  OtherDevice(r),
		ResourceType: "Device",
	})
}

// UnmarshalDevice unmarshals a Device.
func UnmarshalDevice(b []byte) (Device, error) {
	var device Device
	if err := json.Unmarshal(b, &device); err != nil {
		return device, err
	}
	return device, nil
}
